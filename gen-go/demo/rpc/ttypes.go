// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type Errcode int64

const (
	Errcode_no_wrong      Errcode = 0
	Errcode_argc_wrong    Errcode = 1
	Errcode_argv_wrong    Errcode = 2
	Errcode_command_wrong Errcode = 3
	Errcode_cannot_run    Errcode = 4
)

func (p Errcode) String() string {
	switch p {
	case Errcode_no_wrong:
		return "Errcode_no_wrong"
	case Errcode_argc_wrong:
		return "Errcode_argc_wrong"
	case Errcode_argv_wrong:
		return "Errcode_argv_wrong"
	case Errcode_command_wrong:
		return "Errcode_command_wrong"
	case Errcode_cannot_run:
		return "Errcode_cannot_run"
	}
	return "<UNSET>"
}

func ErrcodeFromString(s string) (Errcode, error) {
	switch s {
	case "Errcode_no_wrong":
		return Errcode_no_wrong, nil
	case "Errcode_argc_wrong":
		return Errcode_argc_wrong, nil
	case "Errcode_argv_wrong":
		return Errcode_argv_wrong, nil
	case "Errcode_command_wrong":
		return Errcode_command_wrong, nil
	case "Errcode_cannot_run":
		return Errcode_cannot_run, nil
	}
	return Errcode(math.MinInt32 - 1), fmt.Errorf("not a valid Errcode string")
}

type Request struct {
	Command string   `thrift:"command,1,required"`
	Argc    int32    `thrift:"argc,2,required"`
	Argv    []string `thrift:"argv,3"`
}

func NewRequest() *Request {
	return &Request{}
}

func (p *Request) IsSetArgv() bool {
	return p.Argv != nil && len(p.Argv) > 0
}

func (p *Request) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Request) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Command = v
	}
	return nil
}

func (p *Request) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Argc = v
	}
	return nil
}

func (p *Request) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Argv = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem0 = v
		}
		p.Argv = append(p.Argv, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Request) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Request"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Request) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("command", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:command: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Command)); err != nil {
		return fmt.Errorf("%T.command (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:command: %s", p, err)
	}
	return err
}

func (p *Request) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argc", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:argc: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Argc)); err != nil {
		return fmt.Errorf("%T.argc (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:argc: %s", p, err)
	}
	return err
}

func (p *Request) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Argv != nil {
		if p.IsSetArgv() {
			if err := oprot.WriteFieldBegin("argv", thrift.LIST, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:argv: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.Argv)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Argv {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:argv: %s", p, err)
			}
		}
	}
	return err
}

func (p *Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Request(%+v)", *p)
}

type Result struct {
	State   bool     `thrift:"state,1,required"`
	Err     Errcode  `thrift:"err,2"`
	Reslist []string `thrift:"reslist,3"`
}

func NewResult() *Result {
	return &Result{
		Err: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *Result) IsSetErr() bool {
	return int64(p.Err) != math.MinInt32-1
}

func (p *Result) IsSetReslist() bool {
	return p.Reslist != nil && len(p.Reslist) > 0
}

func (p *Result) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Result) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.State = v
	}
	return nil
}

func (p *Result) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Err = Errcode(v)
	}
	return nil
}

func (p *Result) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Reslist = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem1 = v
		}
		p.Reslist = append(p.Reslist, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Result) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Result) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("state", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:state: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.State)); err != nil {
		return fmt.Errorf("%T.state (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:state: %s", p, err)
	}
	return err
}

func (p *Result) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErr() {
		if err := oprot.WriteFieldBegin("err", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:err: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Err)); err != nil {
			return fmt.Errorf("%T.err (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:err: %s", p, err)
		}
	}
	return err
}

func (p *Result) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Reslist != nil {
		if p.IsSetReslist() {
			if err := oprot.WriteFieldBegin("reslist", thrift.LIST, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:reslist: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.Reslist)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Reslist {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:reslist: %s", p, err)
			}
		}
	}
	return err
}

func (p *Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Result(%+v)", *p)
}
